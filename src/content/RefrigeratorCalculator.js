import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Card,
  CardContent,
  Grid,
  Chip,
  Alert,
  Divider
} from '@mui/material';

// –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º (–∫–í—Ç‚ãÖ—á/–≥–æ–¥ –Ω–∞ 100–ª)
const energyConsumption = {
  'A+++': 22,  // –°–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
  'A++': 33,
  'A+': 44,
  'A': 55,
  'B': 75,
  'C': 95,
  'D': 110,
  'E': 125,
  'F': 150,    // –ù–∞–∏–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π
  'G': 175     // –°—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏
};

const RefrigeratorCalculator = () => {
  const [currentClass, setCurrentClass] = useState('F');
  const [newClass, setNewClass] = useState('A');
  const [capacity, setCapacity] = useState(300);
  const [electricityRate, setElectricityRate] = useState(0.65); // PLN per kWh (average in Poland 2024)
  const [results, setResults] = useState(null);

  const energyClasses = Object.keys(energyConsumption);

  const calculateSavings = React.useCallback(() => {
    const currentConsumption = (energyConsumption[currentClass] * capacity) / 100;
    const newConsumption = (energyConsumption[newClass] * capacity) / 100;
    
    const annualSavingsKWh = currentConsumption - newConsumption;
    const annualSavingsPLN = annualSavingsKWh * electricityRate;
    const monthlySavingsPLN = annualSavingsPLN / 12;
    
    const currentAnnualCost = currentConsumption * electricityRate;
    const newAnnualCost = newConsumption * electricityRate;
    
    const savingsPercentage = ((currentConsumption - newConsumption) / currentConsumption) * 100;

    return {
      currentConsumption: currentConsumption.toFixed(1),
      newConsumption: newConsumption.toFixed(1),
      annualSavingsKWh: annualSavingsKWh.toFixed(1),
      annualSavingsPLN: annualSavingsPLN.toFixed(2),
      monthlySavingsPLN: monthlySavingsPLN.toFixed(2),
      currentAnnualCost: currentAnnualCost.toFixed(2),
      newAnnualCost: newAnnualCost.toFixed(2),
      savingsPercentage: savingsPercentage.toFixed(1)
    };
  }, [currentClass, newClass, capacity, electricityRate]);

  useEffect(() => {
    setResults(calculateSavings());
  }, [calculateSavings]);

  const getClassColor = (energyClass) => {
    const colors = {
      'A+++': '#00C851',
      'A++': '#2E7D32',
      'A+': '#4CAF50',
      'A': '#8BC34A',
      'B': '#CDDC39',
      'C': '#FFEB3B',
      'D': '#FFC107',
      'E': '#FF9800',
      'F': '#FF5722',
      'G': '#F44336'
    };
    return colors[energyClass] || '#9E9E9E';
  };

  return (
    <Box sx={{ p: 3, maxWidth: 800, margin: '0 auto' }}>
      <Typography variant="h4" gutterBottom align="center" sx={{ mb: 4 }}>
        üßä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤
      </Typography>
      
      <Typography variant="subtitle1" gutterBottom align="center" sx={{ mb: 3, color: 'text.secondary' }}>
        –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∑–ª–æ—Ç—ã—Ö –≤—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç–µ –≤ –≥–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –≤ –ü–æ–ª—å—à–µ
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card elevation={2}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
              </Typography>
              
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</InputLabel>
                <Select
                  value={currentClass}
                  onChange={(e) => setCurrentClass(e.target.value)}
                  label="–¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                >
                  {energyClasses.map((cls) => (
                    <MenuItem key={cls} value={cls}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Chip 
                          label={cls} 
                          size="small" 
                          sx={{ 
                            backgroundColor: getClassColor(cls), 
                            color: 'white',
                            minWidth: 50
                          }} 
                        />
                        <span>{energyConsumption[cls]} –∫–í—Ç‚ãÖ—á/–≥–æ–¥ –Ω–∞ 100–ª</span>
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel>–ù–æ–≤—ã–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</InputLabel>
                <Select
                  value={newClass}
                  onChange={(e) => setNewClass(e.target.value)}
                  label="–ù–æ–≤—ã–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                >
                  {energyClasses.map((cls) => (
                    <MenuItem key={cls} value={cls}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Chip 
                          label={cls} 
                          size="small" 
                          sx={{ 
                            backgroundColor: getClassColor(cls), 
                            color: 'white',
                            minWidth: 50
                          }} 
                        />
                        <span>{energyConsumption[cls]} –∫–í—Ç‚ãÖ—á/–≥–æ–¥ –Ω–∞ 100–ª</span>
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <TextField
                fullWidth
                label="–û–±—ä–µ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ (–ª–∏—Ç—Ä—ã)"
                type="number"
                value={capacity}
                onChange={(e) => setCapacity(Number(e.target.value))}
                sx={{ mb: 2 }}
                inputProps={{ min: 50, max: 1000 }}
              />

              <TextField
                fullWidth
                label="–¢–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é (PLN –∑–∞ –∫–í—Ç‚ãÖ—á)"
                type="number"
                value={electricityRate}
                onChange={(e) => setElectricityRate(Number(e.target.value))}
                inputProps={{ min: 0.1, max: 2, step: 0.01 }}
                helperText="–°—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ –≤ –ü–æ–ª—å—à–µ: 0.65 PLN/–∫–í—Ç‚ãÖ—á"
              />
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={6}>
          {results && (
            <Card elevation={2}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
                </Typography>

                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–ª–∞—Å—Å {currentClass}):
                  </Typography>
                  <Typography variant="h6" color="error">
                    {results.currentConsumption} –∫–í—Ç‚ãÖ—á/–≥–æ–¥
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –°—Ç–æ–∏–º–æ—Å—Ç—å: {results.currentAnnualCost} PLN/–≥–æ–¥
                  </Typography>
                </Box>

                <Box sx={{ mb: 2 }}>
                  <Typography variant="body2" color="text.secondary">
                    –ù–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–ª–∞—Å—Å {newClass}):
                  </Typography>
                  <Typography variant="h6" color="success.main">
                    {results.newConsumption} –∫–í—Ç‚ãÖ—á/–≥–æ–¥
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –°—Ç–æ–∏–º–æ—Å—Ç—å: {results.newAnnualCost} PLN/–≥–æ–¥
                  </Typography>
                </Box>

                <Divider sx={{ my: 2 }} />

                <Box sx={{ mb: 2 }}>
                  <Typography variant="h6" color="primary" gutterBottom>
                    üí∞ –í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏—è:
                  </Typography>
                  
                  <Alert severity="success" sx={{ mb: 1 }}>
                    <Typography variant="h5">
                      {results.annualSavingsPLN} PLN –≤ –≥–æ–¥
                    </Typography>
                  </Alert>
                  
                  <Typography variant="body1" sx={{ mb: 1 }}>
                    üìÖ {results.monthlySavingsPLN} PLN –≤ –º–µ—Å—è—Ü
                  </Typography>
                  
                  <Typography variant="body1" sx={{ mb: 1 }}>
                    ‚ö° {results.annualSavingsKWh} –∫–í—Ç‚ãÖ—á –≤ –≥–æ–¥
                  </Typography>
                  
                  <Typography variant="body1">
                    üìä {results.savingsPercentage}% —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
                  </Typography>
                </Box>

                {parseFloat(results.savingsPercentage) > 30 && (
                  <Alert severity="info">
                    –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –≠–∫–æ–Ω–æ–º–∏—è –±–æ–ª–µ–µ 30% —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–Ω–∏–∑–∏—Ç –≤–∞—à–∏ —Å—á–µ—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ.
                  </Alert>
                )}
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>

      <Box sx={{ mt: 3 }}>
        <Typography variant="body2" color="text.secondary" align="center">
          üí° –°–æ–≤–µ—Ç: –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏ –∫–ª–∞—Å—Å–∞ A+++ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –≤ 7-8 —Ä–∞–∑ –º–µ–Ω—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏, —á–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∞ F –∏–ª–∏ G.
          –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ 3-5 –ª–µ—Ç –∑–∞ —Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–µ.
        </Typography>
      </Box>
    </Box>
  );
};

export default RefrigeratorCalculator;