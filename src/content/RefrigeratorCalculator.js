import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Button,
  Grid,
  Alert,
  Chip,
  Divider
} from '@mui/material';
import { styled } from '@mui/material/styles';

const StyledCard = styled(Card)(({ theme }) => ({
  margin: theme.spacing(2),
  maxWidth: 800,
  margin: '0 auto',
  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  color: 'white'
}));

const StyledTextField = styled(TextField)(({ theme }) => ({
  '& .MuiOutlinedInput-root': {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    '& fieldset': {
      borderColor: 'rgba(255, 255, 255, 0.3)',
    },
    '&:hover fieldset': {
      borderColor: 'rgba(255, 255, 255, 0.5)',
    },
    '&.Mui-focused fieldset': {
      borderColor: 'white',
    },
  },
  '& .MuiInputLabel-root': {
    color: 'rgba(255, 255, 255, 0.8)',
  },
  '& .MuiInputLabel-root.Mui-focused': {
    color: 'white',
  }
}));

const StyledSelect = styled(FormControl)(({ theme }) => ({
  '& .MuiOutlinedInput-root': {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    '& fieldset': {
      borderColor: 'rgba(255, 255, 255, 0.3)',
    },
    '&:hover fieldset': {
      borderColor: 'rgba(255, 255, 255, 0.5)',
    },
    '&.Mui-focused fieldset': {
      borderColor: 'white',
    },
  },
  '& .MuiInputLabel-root': {
    color: 'rgba(255, 255, 255, 0.8)',
  },
  '& .MuiInputLabel-root.Mui-focused': {
    color: 'white',
  }
}));

const RefrigeratorCalculator = () => {
  const [currentClass, setCurrentClass] = useState('');
  const [newClass, setNewClass] = useState('');
  const [customConsumption, setCustomConsumption] = useState('');
  const [electricityPrice, setElectricityPrice] = useState('0.85');
  const [results, setResults] = useState(null);

  // –î–∞–Ω–Ω—ã–µ –ø–æ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º (–∫–í—Ç‚ãÖ—á/–≥–æ–¥)
  const energyConsumption = {
    'A+++': 150,
    'A++': 200,
    'A+': 250,
    'A': 300,
    'B': 400,
    'C': 500,
    'D': 600,
    'E': 700,
    'F': 800
  };

  // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const classColors = {
    'A+++': '#4CAF50',
    'A++': '#8BC34A',
    'A+': '#CDDC39',
    'A': '#FFEB3B',
    'B': '#FFC107',
    'C': '#FF9800',
    'D': '#FF5722',
    'E': '#F44336',
    'F': '#D32F2F'
  };

  const calculateSavings = () => {
    if (!currentClass || !newClass) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      return;
    }

    const currentConsumption = customConsumption ? 
      parseFloat(customConsumption) : 
      energyConsumption[currentClass];
    
    const newConsumption = energyConsumption[newClass];
    const price = parseFloat(electricityPrice);

    if (isNaN(currentConsumption) || isNaN(newConsumption) || isNaN(price)) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
      return;
    }

    const annualSavings = (currentConsumption - newConsumption) * price;
    const monthlySavings = annualSavings / 12;
    const dailySavings = annualSavings / 365;

    setResults({
      currentConsumption,
      newConsumption,
      annualSavings,
      monthlySavings,
      dailySavings,
      currentClass,
      newClass
    });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('pl-PL', {
      style: 'currency',
      currency: 'PLN',
      minimumFractionDigits: 2
    }).format(amount);
  };

  return (
    <StyledCard>
      <CardContent>
        <Typography variant="h4" component="h1" gutterBottom align="center">
          üßä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞
        </Typography>
        <Typography variant="subtitle1" align="center" sx={{ mb: 3, opacity: 0.9 }}>
          –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏—é –≤ –∑–ª–æ—Ç—ã—Ö –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞
        </Typography>

        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <StyledSelect fullWidth>
              <InputLabel>–¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</InputLabel>
              <Select
                value={currentClass}
                onChange={(e) => setCurrentClass(e.target.value)}
                label="–¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
              >
                {Object.keys(energyConsumption).map((className) => (
                  <MenuItem key={className} value={className}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Chip 
                        label={className} 
                        size="small" 
                        sx={{ 
                          backgroundColor: classColors[className],
                          color: 'white',
                          fontWeight: 'bold'
                        }} 
                      />
                      <span>{energyConsumption[className]} –∫–í—Ç‚ãÖ—á/–≥–æ–¥</span>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </StyledSelect>
          </Grid>

          <Grid item xs={12} md={6}>
            <StyledSelect fullWidth>
              <InputLabel>–ù–æ–≤—ã–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</InputLabel>
              <Select
                value={newClass}
                onChange={(e) => setNewClass(e.target.value)}
                label="–ù–æ–≤—ã–π –∫–ª–∞—Å—Å —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
              >
                {Object.keys(energyConsumption).map((className) => (
                  <MenuItem key={className} value={className}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Chip 
                        label={className} 
                        size="small" 
                        sx={{ 
                          backgroundColor: classColors[className],
                          color: 'white',
                          fontWeight: 'bold'
                        }} 
                      />
                      <span>{energyConsumption[className]} –∫–í—Ç‚ãÖ—á/–≥–æ–¥</span>
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </StyledSelect>
          </Grid>

          <Grid item xs={12} md={6}>
            <StyledTextField
              fullWidth
              label="–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç‚ãÖ—á/–≥–æ–¥)"
              value={customConsumption}
              onChange={(e) => setCustomConsumption(e.target.value)}
              helperText="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
              type="number"
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <StyledTextField
              fullWidth
              label="–¶–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (PLN/–∫–í—Ç‚ãÖ—á)"
              value={electricityPrice}
              onChange={(e) => setElectricityPrice(e.target.value)}
              helperText="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –ü–æ–ª—å—à–µ: 0.85 PLN/–∫–í—Ç‚ãÖ—á"
              type="number"
              step="0.01"
            />
          </Grid>

          <Grid item xs={12}>
            <Button
              variant="contained"
              size="large"
              fullWidth
              onClick={calculateSavings}
              sx={{
                backgroundColor: 'rgba(255, 255, 255, 0.2)',
                color: 'white',
                fontWeight: 'bold',
                py: 1.5,
                '&:hover': {
                  backgroundColor: 'rgba(255, 255, 255, 0.3)',
                }
              }}
            >
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—é
            </Button>
          </Grid>

          {results && (
            <Grid item xs={12}>
              <Divider sx={{ my: 2, borderColor: 'rgba(255, 255, 255, 0.3)' }} />
              
              <Alert 
                severity="success" 
                sx={{ 
                  backgroundColor: 'rgba(76, 175, 80, 0.2)',
                  color: 'white',
                  border: '1px solid rgba(76, 175, 80, 0.3)'
                }}
              >
                <Typography variant="h6" gutterBottom>
                  üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
                </Typography>
                
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <Typography variant="body1">
                      <strong>–¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</strong> {results.currentConsumption} –∫–í—Ç‚ãÖ—á/–≥–æ–¥
                    </Typography>
                    <Typography variant="body1">
                      <strong>–ù–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</strong> {results.newConsumption} –∫–í—Ç‚ãÖ—á/–≥–æ–¥
                    </Typography>
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <Typography variant="body1">
                      <strong>–≠–∫–æ–Ω–æ–º–∏—è –≤ –≥–æ–¥:</strong> {formatCurrency(results.annualSavings)}
                    </Typography>
                    <Typography variant="body1">
                      <strong>–≠–∫–æ–Ω–æ–º–∏—è –≤ –º–µ—Å—è—Ü:</strong> {formatCurrency(results.monthlySavings)}
                    </Typography>
                    <Typography variant="body1">
                      <strong>–≠–∫–æ–Ω–æ–º–∏—è –≤ –¥–µ–Ω—å:</strong> {formatCurrency(results.dailySavings)}
                    </Typography>
                  </Grid>
                </Grid>

                <Box sx={{ mt: 2, p: 2, backgroundColor: 'rgba(255, 255, 255, 0.1)', borderRadius: 1 }}>
                  <Typography variant="body2" align="center">
                    –ü–µ—Ä–µ—Ö–æ–¥ —Å –∫–ª–∞—Å—Å–∞ <Chip label={results.currentClass} size="small" sx={{ backgroundColor: classColors[results.currentClass], color: 'white' }} /> 
                    –Ω–∞ –∫–ª–∞—Å—Å <Chip label={results.newClass} size="small" sx={{ backgroundColor: classColors[results.newClass], color: 'white' }} /> 
                    —Å—ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞–º <strong>{formatCurrency(results.annualSavings)}</strong> –≤ –≥–æ–¥!
                  </Typography>
                </Box>
              </Alert>
            </Grid>
          )}

          <Grid item xs={12}>
            <Divider sx={{ my: 2, borderColor: 'rgba(255, 255, 255, 0.3)' }} />
            <Typography variant="body2" align="center" sx={{ opacity: 0.8 }}>
              üí° <strong>–°–æ–≤–µ—Ç:</strong> –ö–ª–∞—Å—Å A+++ —Å–∞–º—ã–π —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é. 
              –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –ü–æ–ª—å—à–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.85 PLN –∑–∞ –∫–í—Ç‚ãÖ—á.
            </Typography>
          </Grid>
        </Grid>
      </CardContent>
    </StyledCard>
  );
};

export default RefrigeratorCalculator;